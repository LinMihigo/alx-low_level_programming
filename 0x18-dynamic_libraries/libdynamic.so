#include "main.h"

/**
* _putchar - Entry point
* @c: c is the param passed to func _putchar()
* Description: prints string
* Return: 0 (Success)
*/
int _putchar(char c)
{
	write(1, &c, 1);
	return (0);
}

/**
* _islower - Starting point
* @c: param
* Return: 0
*/
int _islower(int c)
{
	return (islower(c) ? 1 : 0);
}

/**
* _isalpha - Starting point
* @c: param
* Return: 0
*/
int _isalpha(int c)
{
	return (isalpha(c) ? 1 : 0);
}

/**
* _abs - Starting point
* @n: params
* Return: 0
*/
int _abs(int n)
{
	return (n < 0 ? n * -1 : n);
}

/**
* _isupper - func
* @c: param
* Return: 0
*/
int _isupper(int c)
{
	if (isupper(c))
	{
		return (1);
	}
	return (0);
}

/**
* _isdigit - func
* @c: param
* Return: 0
*/
int _isdigit(int c)
{
	int i;

	for (i = 0; i <= 9; i++)
	{
		if (c == '0' + i)
		{
			return (1);
		}
	}
	return (0);
}

/**
* _strlen - func to return length of a string
* @s: pointer param
* Return: 0
*/
int _strlen(char *s)
{
	int i = 0;

	while (*(s + i) != '\0')
	{
		i++;
	}
	return (i);
}

/**
* _puts - func to return length of a string
* @str: pointer param
* Return: 0
*/
void _puts(char *str)
{
	int i;

	for (i = 0; *(str + i) != '\0'; i++)
	{
		_putchar(*(str + i));
	}
	_putchar('\n');
}

/**
 * _strcpy - copies a string from one pointer to another
 *	including the terminating null byte (\0)
 *
 * @src: source of string parameter input
 * @dest: destination of string
 *
 * Return: pointer to dest input parameter
*/
char *_strcpy(char *dest, char *src)
{
	int a, b = 0;

	for (a = 0; src[a] != '\0'; ++a)
	{
		dest[b] = src[a];
		++b;
	}
	dest[b] = '\0';

	return (dest);
}

/**
 * _atoi - func
 *	including the terminating null byte (\0)
 *
 * @s: param
 *
 * Return: An integer
*/
int _atoi(char *s)
{
	unsigned int num = 0;
	int sign = 1;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}

/**
* _strcat - prints n elements of an array of integers.
*
* @dest: elements parameter input
* @src: string parameter input
*
* Return: Nothing
*/
char *_strcat(char *dest, char *src)
{
	int strlen;

	int i;

	for (strlen = 0; dest[strlen] != '\0'; strlen++)
	;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[strlen++] = src[i];
	}

	return (dest);
}

/**
* _strncat - prints n elements of an array of integers.
*
* @dest: elements parameter input
* @src: string parameter input
* @n: param
*
* Return: Nothing
*/
char *_strncat(char *dest, char *src, int n)
{
	int strlen;

	int i;

	for (strlen = 0; dest[strlen] != '\0'; strlen++)
	;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[strlen + i] = src[i];
	}
	dest[strlen + i] = '\0';

	return (dest);
}

/**
 * _strncpy - copies a string from one pointer to another
 *	including the terminating null byte (\0)
 *
 * @src: source of string parameter input
 * @dest: destination of string
 * @n: param
 *
 * Return: pointer to dest input parameter
*/

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}

/**
* _strcmp - compares two strings
* @s1: 1st string
* @s2: 2nd string
* Return: integer
*/
int _strcmp(char *s1, char *s2)
{
	int i;

	int x;

	for (i = 0; s1[i] != '\0' && s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
	{
		x = s1[i] - s2[i];
		break;
	}
	else
	{
		x = s1[i] - s2[i];
	}
	}

	return (x);
}

/**
* _memset - copies memory area
* @s: pointer to memory to be altered
* @b: char to use to alter
* @n: number of times to alter
* Return: char
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}

/**
* _memcpy - copies memory area
* @dest: pointer to memory to be altered
* @src: pointer to memory value to be used to alter
* @n: number of times to alter
* Return: a pointer to dest
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}

/**
* _strchr - locates a character in a string
* @s: pointer to string to be checked
* @c: character to look for
* Return: a pointer to first occurrence of c
*/
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}

	return ('\0');
}

/**
* _strspn - gets the length of a prefix substring
* @s: pointer to string to be checked
* @accept: characters to look up
* Return: no. of bytes
*/
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i = 0, j = 0;

	unsigned int found = 1;

	while (s[i] != '\0')
	{
		found = 1;

		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				found = 0;
				break;
			}
		}

		if (found)
		{
			break;
		}

		i++;
	}

	return (i);
}

/**
 * _strpbrk - a function that searches a
 *            string for any of a set of bytes.
 *
 * @s: pointer to input string
 * @accept: pointer to string we
 *         searching for in @s
 *
 * Return: pointer to the bytes in @s
 *         or NULL if no such byte is found
*/
char *_strpbrk(char *s, char *accept)
{
	int i = 0;
	int j = 0;

	while (s[i] != '\0')
	{
		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
			{
				return (s + i);
			}
			j++;
		}
		i++;
		j = 0;
	}

	return ('\0');
}

/**
* _strstr - a function that locates a substring
*
* @haystack: input string to search for matching
*            substrings
* @needle: subtring to search for
*
* Return: a pointer to the beginning
*         of the located substring or
*         NULL if substring is not found
*/
char *_strstr(char *haystack, char *needle)
{
	char *h;
	char *n;

	while (*haystack != '\0')
	{
		h = haystack;
		n = needle;

		while (*n != '\0' && *haystack == *n)
		{
			haystack++;
			n++;
		}

		if (!*n)
		{
			return (h);
		}

		haystack++;
	}

	return ('\0');
}
